// Code generated by MockGen. DO NOT EDIT.
// Source: subscribable.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/tembleking/myBankSourcing/pkg/domain"
)

// MockSubscribable is a mock of Subscribable interface.
type MockSubscribable struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribableMockRecorder
}

// MockSubscribableMockRecorder is the mock recorder for MockSubscribable.
type MockSubscribableMockRecorder struct {
	mock *MockSubscribable
}

// NewMockSubscribable creates a new mock instance.
func NewMockSubscribable(ctrl *gomock.Controller) *MockSubscribable {
	mock := &MockSubscribable{ctrl: ctrl}
	mock.recorder = &MockSubscribableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribable) EXPECT() *MockSubscribableMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscribable) Subscribe(ctx context.Context) (<-chan domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx)
	ret0, _ := ret[0].(<-chan domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscribableMockRecorder) Subscribe(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscribable)(nil).Subscribe), ctx)
}
