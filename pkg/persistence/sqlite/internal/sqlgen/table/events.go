//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Events = newEventsTable("", "events", "")

type eventsTable struct {
	sqlite.Table

	// Columns
	StreamName    sqlite.ColumnString
	StreamVersion sqlite.ColumnInteger
	EventName     sqlite.ColumnString
	EventData     sqlite.ColumnString
	HappenedOn    sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EventsTable struct {
	eventsTable

	EXCLUDED eventsTable
}

// AS creates new EventsTable with assigned alias
func (a EventsTable) AS(alias string) *EventsTable {
	return newEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EventsTable with assigned schema name
func (a EventsTable) FromSchema(schemaName string) *EventsTable {
	return newEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EventsTable with assigned table prefix
func (a EventsTable) WithPrefix(prefix string) *EventsTable {
	return newEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EventsTable with assigned table suffix
func (a EventsTable) WithSuffix(suffix string) *EventsTable {
	return newEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEventsTable(schemaName, tableName, alias string) *EventsTable {
	return &EventsTable{
		eventsTable: newEventsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newEventsTableImpl("", "excluded", ""),
	}
}

func newEventsTableImpl(schemaName, tableName, alias string) eventsTable {
	var (
		StreamNameColumn    = sqlite.StringColumn("stream_name")
		StreamVersionColumn = sqlite.IntegerColumn("stream_version")
		EventNameColumn     = sqlite.StringColumn("event_name")
		EventDataColumn     = sqlite.StringColumn("event_data")
		HappenedOnColumn    = sqlite.TimestampColumn("happened_on")
		allColumns          = sqlite.ColumnList{StreamNameColumn, StreamVersionColumn, EventNameColumn, EventDataColumn, HappenedOnColumn}
		mutableColumns      = sqlite.ColumnList{StreamNameColumn, StreamVersionColumn, EventNameColumn, EventDataColumn, HappenedOnColumn}
	)

	return eventsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StreamName:    StreamNameColumn,
		StreamVersion: StreamVersionColumn,
		EventName:     EventNameColumn,
		EventData:     EventDataColumn,
		HappenedOn:    HappenedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
