//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Event = newEventTable("", "event", "")

type eventTable struct {
	sqlite.Table

	// Columns
	StreamName    sqlite.ColumnString
	StreamVersion sqlite.ColumnInteger
	EventName     sqlite.ColumnString
	EventData     sqlite.ColumnString
	HappenedOn    sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EventTable struct {
	eventTable

	EXCLUDED eventTable
}

// AS creates new EventTable with assigned alias
func (a EventTable) AS(alias string) *EventTable {
	return newEventTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EventTable with assigned schema name
func (a EventTable) FromSchema(schemaName string) *EventTable {
	return newEventTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EventTable with assigned table prefix
func (a EventTable) WithPrefix(prefix string) *EventTable {
	return newEventTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EventTable with assigned table suffix
func (a EventTable) WithSuffix(suffix string) *EventTable {
	return newEventTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEventTable(schemaName, tableName, alias string) *EventTable {
	return &EventTable{
		eventTable: newEventTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newEventTableImpl("", "excluded", ""),
	}
}

func newEventTableImpl(schemaName, tableName, alias string) eventTable {
	var (
		StreamNameColumn    = sqlite.StringColumn("stream_name")
		StreamVersionColumn = sqlite.IntegerColumn("stream_version")
		EventNameColumn     = sqlite.StringColumn("event_name")
		EventDataColumn     = sqlite.StringColumn("event_data")
		HappenedOnColumn    = sqlite.TimestampColumn("happened_on")
		allColumns          = sqlite.ColumnList{StreamNameColumn, StreamVersionColumn, EventNameColumn, EventDataColumn, HappenedOnColumn}
		mutableColumns      = sqlite.ColumnList{StreamNameColumn, StreamVersionColumn, EventNameColumn, EventDataColumn, HappenedOnColumn}
	)

	return eventTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StreamName:    StreamNameColumn,
		StreamVersion: StreamVersionColumn,
		EventName:     EventNameColumn,
		EventData:     EventDataColumn,
		HappenedOn:    HappenedOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
