// Code generated by MockGen. DO NOT EDIT.
// Source: append_only_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	persistence "github.com/tembleking/myBankSourcing/pkg/persistence"
)

// MockAppendOnlyStore is a mock of AppendOnlyStore interface.
type MockAppendOnlyStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppendOnlyStoreMockRecorder
}

// MockAppendOnlyStoreMockRecorder is the mock recorder for MockAppendOnlyStore.
type MockAppendOnlyStoreMockRecorder struct {
	mock *MockAppendOnlyStore
}

// NewMockAppendOnlyStore creates a new mock instance.
func NewMockAppendOnlyStore(ctrl *gomock.Controller) *MockAppendOnlyStore {
	mock := &MockAppendOnlyStore{ctrl: ctrl}
	mock.recorder = &MockAppendOnlyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppendOnlyStore) EXPECT() *MockAppendOnlyStoreMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockAppendOnlyStore) Append(ctx context.Context, name string, data []byte, expectedVersion uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, name, data, expectedVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockAppendOnlyStoreMockRecorder) Append(ctx, name, data, expectedVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockAppendOnlyStore)(nil).Append), ctx, name, data, expectedVersion)
}

// ReadAllRecords mocks base method.
func (m *MockAppendOnlyStore) ReadAllRecords(ctx context.Context, startVersion, maxCount uint64) ([]persistence.DataWithNameAndVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllRecords", ctx, startVersion, maxCount)
	ret0, _ := ret[0].([]persistence.DataWithNameAndVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllRecords indicates an expected call of ReadAllRecords.
func (mr *MockAppendOnlyStoreMockRecorder) ReadAllRecords(ctx, startVersion, maxCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllRecords", reflect.TypeOf((*MockAppendOnlyStore)(nil).ReadAllRecords), ctx, startVersion, maxCount)
}

// ReadRecords mocks base method.
func (m *MockAppendOnlyStore) ReadRecords(ctx context.Context, name string, startVersion, maxCount uint64) ([]persistence.DataWithVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRecords", ctx, name, startVersion, maxCount)
	ret0, _ := ret[0].([]persistence.DataWithVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRecords indicates an expected call of ReadRecords.
func (mr *MockAppendOnlyStoreMockRecorder) ReadRecords(ctx, name, startVersion, maxCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRecords", reflect.TypeOf((*MockAppendOnlyStore)(nil).ReadRecords), ctx, name, startVersion, maxCount)
}
