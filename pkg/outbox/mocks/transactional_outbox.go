// Code generated by MockGen. DO NOT EDIT.
// Source: transactional_outbox.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	outbox "github.com/tembleking/myBankSourcing/pkg/outbox"
)

// MockAcknowledgableMessage is a mock of AcknowledgableMessage interface.
type MockAcknowledgableMessage struct {
	ctrl     *gomock.Controller
	recorder *MockAcknowledgableMessageMockRecorder
}

// MockAcknowledgableMessageMockRecorder is the mock recorder for MockAcknowledgableMessage.
type MockAcknowledgableMessageMockRecorder struct {
	mock *MockAcknowledgableMessage
}

// NewMockAcknowledgableMessage creates a new mock instance.
func NewMockAcknowledgableMessage(ctrl *gomock.Controller) *MockAcknowledgableMessage {
	mock := &MockAcknowledgableMessage{ctrl: ctrl}
	mock.recorder = &MockAcknowledgableMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcknowledgableMessage) EXPECT() *MockAcknowledgableMessageMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockAcknowledgableMessage) Ack() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockAcknowledgableMessageMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockAcknowledgableMessage)(nil).Ack))
}

// Data mocks base method.
func (m *MockAcknowledgableMessage) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockAcknowledgableMessageMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockAcknowledgableMessage)(nil).Data))
}

// MockSubscribableMessageBroker is a mock of SubscribableMessageBroker interface.
type MockSubscribableMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribableMessageBrokerMockRecorder
}

// MockSubscribableMessageBrokerMockRecorder is the mock recorder for MockSubscribableMessageBroker.
type MockSubscribableMessageBrokerMockRecorder struct {
	mock *MockSubscribableMessageBroker
}

// NewMockSubscribableMessageBroker creates a new mock instance.
func NewMockSubscribableMessageBroker(ctrl *gomock.Controller) *MockSubscribableMessageBroker {
	mock := &MockSubscribableMessageBroker{ctrl: ctrl}
	mock.recorder = &MockSubscribableMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribableMessageBroker) EXPECT() *MockSubscribableMessageBrokerMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscribableMessageBroker) Subscribe(ctx context.Context, f outbox.MessageHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscribableMessageBrokerMockRecorder) Subscribe(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscribableMessageBroker)(nil).Subscribe), ctx, f)
}

// MockPublishableMessageBroker is a mock of PublishableMessageBroker interface.
type MockPublishableMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockPublishableMessageBrokerMockRecorder
}

// MockPublishableMessageBrokerMockRecorder is the mock recorder for MockPublishableMessageBroker.
type MockPublishableMessageBrokerMockRecorder struct {
	mock *MockPublishableMessageBroker
}

// NewMockPublishableMessageBroker creates a new mock instance.
func NewMockPublishableMessageBroker(ctrl *gomock.Controller) *MockPublishableMessageBroker {
	mock := &MockPublishableMessageBroker{ctrl: ctrl}
	mock.recorder = &MockPublishableMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishableMessageBroker) EXPECT() *MockPublishableMessageBrokerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublishableMessageBroker) Publish(ctx context.Context, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublishableMessageBrokerMockRecorder) Publish(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublishableMessageBroker)(nil).Publish), ctx, message)
}

// MockMessageBrokerSerializer is a mock of MessageBrokerSerializer interface.
type MockMessageBrokerSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBrokerSerializerMockRecorder
}

// MockMessageBrokerSerializerMockRecorder is the mock recorder for MockMessageBrokerSerializer.
type MockMessageBrokerSerializerMockRecorder struct {
	mock *MockMessageBrokerSerializer
}

// NewMockMessageBrokerSerializer creates a new mock instance.
func NewMockMessageBrokerSerializer(ctrl *gomock.Controller) *MockMessageBrokerSerializer {
	mock := &MockMessageBrokerSerializer{ctrl: ctrl}
	mock.recorder = &MockMessageBrokerSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBrokerSerializer) EXPECT() *MockMessageBrokerSerializerMockRecorder {
	return m.recorder
}

// Serialize mocks base method.
func (m *MockMessageBrokerSerializer) Serialize(message map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize", message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockMessageBrokerSerializerMockRecorder) Serialize(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockMessageBrokerSerializer)(nil).Serialize), message)
}
